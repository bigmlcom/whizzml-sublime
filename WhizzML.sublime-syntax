%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: WhizzML
comment: 'Symbol pattern : [a-zA-Z+!\-_?0-9*~#@''`/.$=]'
file_extensions:
  - whizzml
scope: source.whizzml
contexts:
  main:
    - include: comment
    - include: function
    - include: function_multi_method
    - include: sexpr
  comment:
    - match: (;;).*(;;)$\n?
      scope: comment.line.semicolon.double.banner.whizzml
      captures:
        1: punctuation.definition.comment.whizzml
    - match: (;;).*$\n?
      scope: comment.line.semicolon.double.whizzml
      captures:
        1: punctuation.definition.comment.whizzml
    - match: ^(;).*$\n?
      scope: comment.line.semicolon.start.whizzml
      captures:
        1: punctuation.definition.comment.whizzml
    - match: (;).*$\n?
      scope: comment.line.semicolon.whizzml
      captures:
        1: punctuation.definition.comment.whizzml
  all:
    - include: function
    - include: function_multi_method
    - include: lambda
    - include: comment
    - include: expr
    - include: sexpr
  binding:
    - include: comment
    - match: '\['
      scope: punctuation.definition.vector.begin.whizzml
      push:
        - meta_scope: meta.structure.binding.vector.whizzml
        - match: '(?=\])'
          pop: true
        - match: '(?<=\[)'
          comment: "TODO: merge with parameters ??"
          push:
            - meta_scope: meta.parameters.vector.whizzml
            - match: '\]'
              scope: punctuation.definition.vector.end.whizzml
              pop: true
            - include: comment
            - include: parameters_variable
            - match: \&
              scope: keyword.operator.varargs.whizzml
            - match: '(:as)(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
              scope: keyword.operator.symbolargs.whizzml
            - include: parameters
            - include: parameters_map
            - include: all
        - include: binding_exp
    - match: '\{'
      scope: punctuation.definition.map.begin.whizzml
      push:
        - meta_scope: meta.structure.binding.map.whizzml
        - match: '(?=\])'
          pop: true
        - match: '(?<=\{)'
          comment: "TODO: merge with map ??"
          push:
            - meta_scope: meta.function.parameters.map.whizzml
            - match: '\}'
              scope: punctuation.definition.map.end.whizzml
              pop: true
            - include: comment
            - include: parameters_variable
            - include: parameters
            - include: parameters_map
            - include: all
        - include: binding_exp
    - match: 'let(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
      captures:
        1: keyword.operator.symbolargs.whizzml
      push:
        - meta_scope: meta.structure.binding.symbolargs.whizzml
        - match: '(?=\])'
          pop: true
        - include: binding_exp
    - match: '(?=[a-zA-Z+!\-_?0-9*~#@''`/.$=])'
      comment: symbol matching
      push:
        - meta_scope: meta.structure.binding.symbol.whizzml
        - match: '(?=\])'
          pop: true
        - match: '(?=[a-zA-Z+!\-_?0-9*~#@''`/.$=])'
          push:
            - meta_scope: variable.parameter.whizzml
            - match: '(?<=[a-zA-Z+!\-_?0-9*~#@''`/.$=])(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
              pop: true
            - include: keyword
            - include: operator
            - include: number
            - include: symbol
        - match: '(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
          push:
            - match: '(?=\])'
              pop: true
            - include: binding_exp
    - match: '[^\s]'
      push:
        - meta_scope: invalid.illegal.bindings.whizzml
        - match: '[^\]]'
          pop: true
  binding_exp:
    - include: comment
    - match: '(\(\)|{}|\[\]|#{})'
      captures:
        1: constant.language.whizzml
      push:
        - meta_scope: meta.structure.binding_exp.constant.language.whizzml
        - match: '(?=\])'
          pop: true
        - include: binding
    - match: (?=#?\()
      push:
        - meta_scope: meta.structure.binding_exp.sexp.whizzml
        - match: '(?=\])'
          pop: true
        - match: (?=#?\()
          push:
            - match: (?<=\))
              pop: true
            - include: function
            - include: function_multi_method
            - include: lambda
            - include: sexpr
        - include: binding
    - match: '\['
      scope: punctuation.definition.vector.begin.whizzml
      push:
        - meta_scope: meta.structure.binding_exp.vector.whizzml
        - match: '(?=\])'
          pop: true
        - match: '(?<=\[)'
          comment: "TODO: merge with vector"
          push:
            - meta_scope: meta.expression.vector.whizzml
            - match: '\]'
              scope: punctuation.definition.vector.end.whizzml
              pop: true
            - include: all
        - include: binding
    - match: '\{'
      scope: punctuation.definition.map.begin.whizzml
      push:
        - meta_scope: meta.structure.binding_exp.map.whizzml
        - match: '(?=\])'
          pop: true
        - match: '(?<=\{)'
          comment: "TODO: merge with map"
          push:
            - meta_scope: meta.expression.map.whizzml
            - match: "}"
              scope: punctuation.definition.map.end.whizzml
              pop: true
            - include: all
        - include: binding
    - match: (?=")|(?=\\)|(?=\:)|(?=\#")
      push:
        - meta_scope: meta.structure.binding_exp.string.whizzml
        - match: '(?=\])'
          pop: true
        - include: string
        - include: binding
    - match: '(?=[a-zA-Z+!\-_?0-9*~#@''`/.$=])'
      comment: symbol matching
      push:
        - meta_scope: meta.structure.binding_exp.symbol.whizzml
        - match: '(?=\])'
          pop: true
        - match: '(?=[a-zA-Z+!\-_?0-9*~#@''`/.$=])'
          push:
            - match: '(?<=[a-zA-Z+!\-_?0-9*~#@''`/.$=])(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
              pop: true
            - include: keyword
            - include: operator
            - include: number
            - include: symbol
        - match: '(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
          push:
            - match: '(?=\])'
              pop: true
            - include: binding
    - match: '[^\s]'
      push:
        - meta_scope: invalid.illegal.bindings.whizzml
        - match: '[^\]]'
          pop: true
  bindings_form:
    - match: '\['
      comment: bindings followed by all
      push:
        - meta_scope: meta.structure.bindings.whizzml
        - match: (?=\))
          pop: true
        - match: '(?<=\[)'
          push:
            - match: '\]'
              pop: true
            - include: binding
        - match: '(?<=\])'
          push:
            - match: (?=\))
              pop: true
            - include: all
  expr:
    - include: keyword
    - include: operator
    - include: string
    - include: vector
    - include: map
    - include: number
    - include: symbol
  function:
    - match: \(\s*(defn\-?)\s
      captures:
        1: storage.type.function.type.whizzml
      push:
        - meta_scope: meta.function.whizzml
        - match: \)
          captures:
            1: punctuation.terminator.function.whizzml
          pop: true
        - include: comment
        - match: \s*
        - include: function_name
        - include: function_body_comment
  function_body:
    - match: '\(\s*(?=\[)'
      push:
        - meta_scope: meta.function.body.code.whizzml
        - match: \)
          pop: true
        - include: parameters_body
    - match: '(?=\[)'
      push:
        - meta_scope: meta.function.body.whizzml
        - match: (?=\))
          pop: true
        - include: parameters_body
  function_body_comment:
    - match: '"'
      scope: string.quoted.double.begin.whizzml
      push:
        - meta_scope: string.docstring.whizzml
        - match: '"'
          scope: string.quoted.double.end.whizzml
          pop: true
        - include: string_escape
    - match: '\{'
      scope: comment.punctuation.definition.metadata.begin.whizzml
      push:
        - meta_scope: meta.metadata.map.whizzml
        - match: '\}'
          scope: comment.punctuation.definition.metadata.end.whizzml
          pop: true
    - include: function_body
  function_multi_method:
    - match: \(\s*(defmethod\-?)\s+
      captures:
        1: storage.type.function.type.whizzml
      push:
        - meta_scope: meta.function.multi_method.whizzml
        - match: \)
          pop: true
        - include: comment
        - match: '(?=[a-zA-Z+!\-_?0-9*~#@''`/.$=])'
          push:
            - match: (?=\))
              pop: true
            - match: '(?=[a-zA-Z+!\-_?0-9*~#@''`/.$=])'
              push:
                - meta_scope: meta.function.multi_method.name.whizzml
                - match: '(?<=[a-zA-Z+!\-_?0-9*~#@''`/.$=])(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
                  pop: true
                - include: function_name
            - match: '(?<=[a-zA-Z+!\-_?0-9*~#@''`/.$=])(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
              push:
                - match: (?=\))
                  pop: true
                - include: comment
                - match: '(\(\)|{}|\[\]|#{})'
                  captures:
                    1: constant.language.whizzml
                  push:
                    - meta_scope: meta.structure.multi_method_exp.constant.language.whizzml
                    - match: (?=\))
                      pop: true
                    - include: parameters_body
                - match: (?=#?\()
                  push:
                    - meta_scope: meta.structure.multi_method_exp.sexp.whizzml
                    - match: (?=\))
                      pop: true
                    - match: (?=#?\()
                      push:
                        - match: (?<=\))
                          pop: true
                        - include: function
                        - include: function_multi_method
                        - include: lambda
                        - include: sexpr
                    - include: parameters_body
                - match: '\['
                  scope: punctuation.definition.vector.begin.whizzml
                  push:
                    - meta_scope: meta.structure.multi_method_exp.vector.whizzml
                    - match: (?=\))
                      pop: true
                    - match: '(?<=\[)'
                      comment: "TODO: merge with vector"
                      push:
                        - meta_scope: meta.expression.vector.whizzml
                        - match: '\]'
                          scope: punctuation.definition.vector.end.whizzml
                          pop: true
                        - include: all
                    - match: '(?<=\])\s*'
                      push:
                        - match: (?=\))
                          pop: true
                        - include: parameters_body
                - match: '\{'
                  scope: punctuation.definition.map.begin.whizzml
                  push:
                    - meta_scope: meta.structure.multi_method_exp.map.whizzml
                    - match: (?=\))
                      pop: true
                    - match: '(?<=\{)'
                      comment: "TODO: merge with map"
                      push:
                        - meta_scope: meta.expression.map.whizzml
                        - match: "}"
                          scope: punctuation.definition.map.end.whizzml
                          pop: true
                        - include: all
                    - include: parameters_body
                - match: (?=")|(?=\\)|(?=\:)|(?=\#")
                  push:
                    - meta_scope: meta.structure.multi_method_exp.string.whizzml
                    - match: (?=\))
                      pop: true
                    - include: string
                    - include: parameters_body
                - match: '(?=[a-zA-Z+!\-_?0-9*~#@''`/.$=])'
                  comment: symbol matching
                  push:
                    - meta_scope: meta.structure.multi_method_exp.symbol.whizzml
                    - match: (?=\))
                      pop: true
                    - match: '(?=[a-zA-Z+!\-_?0-9*~#@''`/.$=])'
                      push:
                        - match: '(?<=[a-zA-Z+!\-_?0-9*~#@''`/.$=])(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
                          pop: true
                        - include: keyword
                        - include: operator
                        - include: number
                        - include: symbol
                    - match: '(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
                      push:
                        - match: (?=\))
                          pop: true
                        - include: parameters_body
  function_name:
    - match: '(?=[a-zA-Z+!\-_?0-9*~#@''`/.$=])'
      comment: symbol matching
      push:
        - meta_scope: entity.name.function.whizzml
        - match: '(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
          pop: true
        - include: keyword
        - include: operator
        - match: '-(?=[a-zA-Z+!\-_?*~#@''`/.$=])'
          scope: keyword.operator.prefix.genclass.whizzml
          push:
            - match: '(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
              pop: true
            - include: symbol
        - include: symbol
  keyword:
    - match: '(?<![*+!_?\-])\b(if|cond|handle|iterate|break|let|loop|raise|recur|try|catch)\b(?![*+!_?\-])'
      scope: keyword.control.whizzml
    - match: '(?<![*+!_?\-])\b(str|map|list|list\*)\b(?![*+!_?\-])'
      scope: storage.whizzml
    - match: '(?<![*+!_?\-])\b(create|create-and-wait|delete|wait|wait-forever)\*(?![*+!_?\-])'
      scope: support.function.whizzml
    - match: '(?<![*+!_?\-])\b(boolean|contains-string|contains|empty|even|integer|list|map|matches|member|negative|nil|number|odd|positive|procedure|real|regexp|resource-done|resource-id|string|zero)\?(?![*+!_?\-])'
      scope: support.function.tester.whizzml
    - match: '(?<![*+!_?\-])\b(abort|abs|acos|and|append|apply|asin|assoc|assoc-in|atan|bigml--cdf|bigml--pdf|butlast|ceil|concat|cons|cos|cosh|count|create|create|create-and-wait|create-and-wait-anomaly|create-and-wait-anomalyscore|create-and-wait-association|create-and-wait-batchanomalyscore|create-and-wait-batchcentroid|create-and-wait-batchprediction|create-and-wait-centroid|create-and-wait-cluster|create-and-wait-correlation|create-and-wait-dataset|create-and-wait-ensemble|create-and-wait-evaluation|create-and-wait-execution|create-and-wait-library|create-and-wait-logisticregression|create-and-wait-model|create-and-wait-prediction|create-and-wait-project|create-and-wait-sample|create-and-wait-script|create-and-wait-source|create-and-wait-statisticaltest|create-anomaly|create-anomalyscore|create-association|create-batchanomalyscore|create-batchcentroid|create-batchprediction|create-centroid|create-cluster|create-correlation|create-dataset|create-dataset-split|create-ensemble|create-evaluation|create-execution|create-library|create-logisticregression|create-model|create-prediction|create-project|create-random-dataset-split|create-sample|create-script|create-source|create-statisticaltest|created-resources|dataset-choose-objective-id|dataset-get-objective-id|define|delete|dissoc|dissoc-in|div|drop|exp|fetch|filter|flatline|flatline-listify|flatline-splice|flatline-str|flatline-str-splice|floor|for|get|get-in|handle|head|identity|insert|iterate|join|keys|lambda|last|list|list-anomalies|list-anomalyscores|list-associations|list-batchanomalyscores|list-batchcentroids|list-batchpredictions|list-centroids|list-clusters|list-correlations|list-datasets|list-ensembles|list-evaluations|list-executions|list-libraries|list-logisticregressions|list-models|list-predictions|list-projects|list-samples|list-scripts|list-sources|list-statisticaltests|ln|log|log-error|log-info|log-warn|log10|log2|make-map|map|matches|max|max-key|mean|merge|min|min-key|not|nth|or|parse-resource-id|pow|ppr-str|pr-str|pretty-whizzml|prog|raise|rand|rand-int|rand-range|range|re-quote|reduce|rem|repeat|repeatedly|replace|replace-first|resource-done?|resource-id|resource-id?|resource-ids|resource-type|resources|reverse|round|row-distance|row-distance-squared|sin|sinh|smacdown--actual|smacdown--aggregate-predictions|smacdown--candidates|smacdown--data->dataset|smacdown--do-iteration|smacdown--evaluate|smacdown--expected|smacdown--get-id|smacdown--make-ensemble|smacdown--p-improvement|smacdown--predictions|smacdown--project|smacdown--schedule|smacdown--trees-in-ensemble|smacdown-optimize|some|sort|sort-by-key|sqrt|stdev|str|subs|tail|take|tan|tanh|to-degrees|to-radians|update|update-and-wait|values|variance|version|version-major|version-micro|version-minor|wait|wait-forever|wait-forever*|when)\b(?![*+!_?\-])'
      scope: support.function.whizzml
    - match: '(?<![*+!_?\-])\b(true|false)\b(?![*+!_?\-])'
      scope: constant.language.whizzml
  lambda:
    - match: \(\s*(lambda)\s+
      captures:
        1: storage.type.function.type.whizzml
      push:
        - meta_scope: meta.function.lambda.whizzml
        - match: \)
          pop: true
        - include: comment
        - include: function_name
        - include: function_body
    - match: (#)\(
      captures:
        1: storage.type.function.type.whizzml
      push:
        - meta_scope: meta.function.lambda.whizzml
        - match: \)
          pop: true
        - include: sexpr_special
        - include: all
  map:
    - match: "{(?!})"
      scope: punctuation.definition.map.begin.whizzml
      push:
        - meta_scope: meta.expression.map.whizzml
        - match: "(?<!{)}"
          scope: punctuation.definition.map.end.whizzml
          pop: true
        - include: all
  number:
    - match: '(-|\+)?\b[0-9]+(/)[0-9]+\b'
      scope: constant.numeric.float.ratio.whizzml
      captures:
        2: keyword.operator.arithmetic.ratio.whizzml
    - match: '[-+]?\b[0-9]+((\.[0-9]+([eE][-+]?[0-9]+)?)|((\.[0-9]+)?[eE][-+]?[0-9]+))?\b'
      scope: constant.numeric.float.whizzml
    - match: '[-+]?\b[0-9]+(((\.[0-9])?+([eE][-+]?[0-9]+)?)|((\.[0-9]+)?[eE][-+]?[0-9]+))[M]?\b'
      scope: constant.numeric.big_decimal.whizzml
    - match: '(-|\+)?\b(0)([0-7]+|([89]))([0-9]*)\b'
      scope: constant.numeric.integer.octal.whizzml
      captures:
        2: keyword.operator.arithmetic.octal.whizzml
        4: invalid.illegal.integer.octal.whizzml
        5: invalid.illegal.integer.octal.whizzml
    - match: '(-|\+)?\b[0-9]+\b'
      scope: constant.numeric.integer.whizzml
    - match: '(-|\+)?\b(0[xX])[0-9A-Fa-f]+\b'
      scope: constant.numeric.integer.hexa.whizzml
      captures:
        2: keyword.operator.arithmetic.hexa.whizzml
  operator:
    - match: '(?<![a-zA-Z0-9*+!_?\-])(\*|/|\<|\<=|=|\>|\>=|-\>)(?![a-zA-Z0-9*+!_?\-])'
      scope: keyword.operator.whizzml
    - match: '(?<![a-zA-Z0-9*+!_?\-])(-|\+)(?![a-zA-Z0-9*+!_?\-])'
      scope: keyword.operator.whizzml
    - match: '(?<![a-zA-Z0-9*+!_?\-])(\.|\.\.)(?![a-zA-Z0-9*+!_?\-])'
      scope: keyword.operator.class.whizzml
  parameters:
    - match: '\('
      scope: punctuation.definition.vector.begin.whizzml
      push:
        - meta_scope: meta.parameters.vector.whizzml
        - match: '\)'
          scope: punctuation.definition.vector.end.whizzml
          pop: true
        - match: \.
          scope: keyword.operator.varargs.whizzml
        - include: comment
        - include: parameters_variable
        - include: parameters
        - include: parameters_map
  parameters_body:
    - include: parameters_function
    - match: '(?<=\])'
      push:
        - meta_scope: meta.function.body.code.whizzml
        - match: (?=\))
          pop: true
        - include: all
  parameters_function:
    - match: '\['
      scope: punctuation.definition.vector.begin.whizzml
      push:
        - meta_scope: meta.function.parameters.vector.whizzml
        - match: '\]'
          scope: punctuation.definition.vector.end.whizzml
          pop: true
        - match: \&
          scope: keyword.operator.varargs.whizzml
        - include: comment
        - include: parameters_variable
        - include: parameters
        - include: parameters_map
  parameters_map:
    - match: '\{'
      scope: punctuation.definition.map.begin.whizzml
      push:
        - meta_scope: meta.function.parameters.map.whizzml
        - match: '\}'
          scope: punctuation.definition.map.end.whizzml
          pop: true
        - include: parameters_variable
        - include: parameters
        - include: parameters_map
        - include: all
  parameters_variable:
    - match: '(?=[a-zA-Z+!\-_?0-9*~@''`/.$=])'
      comment: symbol matching TODO:operator number => error ?
      push:
        - meta_scope: variable.parameter.whizzml
        - match: '(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
          pop: true
        - include: keyword
        - include: operator
        - include: number
        - include: symbol
  sexpr:
    - match: \((?!\))
      push:
        - meta_scope: meta.sexpr.whizzml
        - match: (?<!\()\)
          pop: true
        - include: sexpr_special
        - include: all
  sexpr_special:
    - match: '(?<=\()\s*(iterate|let|loop|for)\s+(?=\[)'
      captures:
        1: keyword.control.whizzml
      push:
        - meta_scope: meta.function.let_form.whizzml
        - match: (?=\))
          pop: true
        - include: bindings_form
    - match: (?<=\()\s*(define)\s+
      captures:
        1: storage.type.variable.whizzml
      push:
        - meta_scope: meta.function.def_form.whizzml
        - match: (?=\))
          pop: true
        - match: \s*
        - include: function_name
        - match: (?<=$|.)
          push:
            - match: (?=\))
              pop: true
            - include: all
    - match: '(?<=\()\s*((\.\.?)\s+(?=([a-z]+\.)*[A-Z][a-zA-Z]*(\$[A-Z][a-zA-Z]*)?))'
      captures:
        2: keyword.control.whizzml
      push:
        - meta_scope: meta.function.member_access_form.whizzml
        - match: (?=\))
          pop: true
        - match: '(?=[a-zA-Z+!\-_?0-9*~#@''`/.$=])'
          push:
            # - meta_scope: storage.type.java.whizzml
            - meta_scope: storage.type.whizzml.whizzml
            - match: '(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
              pop: true
            - include: symbol
        - match: '(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
          push:
            - match: (?=\))
              pop: true
            - include: all
        - include: all
    - match: (?<=\()\s*((catch)\s+)
      captures:
        2: keyword.control.whizzml
      push:
        - meta_scope: meta.function.catch_form.whizzml
        - match: (?=\))
          pop: true
        - match: '(?=[a-zA-Z+!\-_?0-9*~#@''`/.$=])'
          push:
            - match: '(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
              pop: true
        - match: '\s+(?=[a-zA-Z+!\-_?0-9*~#@''`/.$=])'
          push:
            - meta_scope: variable.parameter.whizzml
            - match: '(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
              pop: true
            - include: symbol
        - match: '(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
          push:
            - match: (?=\))
              pop: true
            - include: all
        - include: all
        - match: '(?<=\))'
          push:
            - match: (?=\))
              pop: true
            - include: comment
            - match: '(?=\()'
              push:
                - meta_scope: meta.function.body.catch_form.whizzml
                - match: (?=\))
                  pop: true
                - include: comment
                - include: parameters
                - match: '(?<=\))'
                  push:
                    - match: (?=\))
                      pop: true
                    - include: comment
                    - match: \(\s*
                      push:
                        - meta_scope: meta.function.catch.method.whizzml
                        - match: \)
                          pop: true
                        - include: comment
                        - include: function_name
                        - include: function_body_comment
  string:
    - match: '"'
      scope: punctuation.definition.string.begin.whizzml
      push:
        - meta_scope: string.quoted.double.whizzml
        - match: '"'
          scope: punctuation.definition.string.end.whizzml
          pop: true
        - include: string_escape
    - match: '\\(u[0-9a-fA-F]{4}|newline|tab|space|backspace|formfeed|return|[^\s])'
      scope: constant.character.escape.whizzml
    - match: '(\:{1,2})(?=[a-zA-Z+!\-_?0-9*/.$=])'
      comment: . is OK in symbol ?
      captures:
        1: keyword.operator.symbol.whizzml
      push:
        - meta_scope: constant.string.symbol.whizzml
        - match: '(?![a-zA-Z+!\-_?0-9*~#@''`/.$=])'
          pop: true
        - include: symbol
  string_escape:
    - match: '\\(u[0-9a-fA-F]{4}|b|t|n|f|r|"|''|\\|[0-3]?[0-7]{1,2}|(.))'
      scope: constant.character.escape.whizzml
      captures:
        2: invalid.illegal.escape.string.whizzml
  symbol:
    - match: '\b[A-Z]\b'
      scope: constant.other.single.whizzml
    - match: '\b[A-Z0-9_\-]{2,}\b'
      scope: constant.other.multiple.whizzml
    - match: '(?<![a-zA-Z+!\-_?0-9*])\*[a-z\-]{2,}\*(?![a-zA-Z+!\-_?0-9*])'
      scope: source.symbol.global.whizzml
    - match: '(?=[a-zA-Z+!\-_?0-9*=])'
      push:
        - meta_scope: source.symbol.whizzml
        - match: '(?![a-zA-Z+!\-_?0-9*=])'
          pop: true
        - match: "[0-9]"
          push:
            - meta_scope: invalid.illegal.symbol.whizzml
            - match: '(?![a-zA-Z+!\-_?0-9*=])'
              pop: true
        - match: "[a-zA-Z]"
          push:
            - match: '([+!\-_?*=#])?(?![a-zA-Z+!\-_?0-9*=])'
              captures:
                1: keyword.other.mark.whizzml
              pop: true
        - match: '[+!\-_?*=]'
          push:
            - match: '(?![a-zA-Z+!\-_?0-9*=])'
              pop: true
    - match: '(?<=[a-zA-Z+!\-_?0-9*])\.(?=[a-zA-Z+!\-_?0-9*])'
      scope: keyword.operator.classpath.whizzml
    - match: '(?<=[a-zA-Z+!\-_?0-9*])(/|\$)(?=[a-zA-Z+!\-_?0-9*])'
      scope: keyword.operator.qualified.whizzml
  vector:
    - match: '\[(?!\])'
      scope: punctuation.definition.vector.begin.whizzml
      push:
        - meta_scope: meta.expression.vector.whizzml
        - match: '(?<!\[)\]'
          scope: punctuation.definition.vector.end.whizzml
          pop: true
        - include: all
