{
    "scope": "source.whizzml source -(comment, string)",
    "completions": [
        {"trigger": "abort", "contents": "abort"},
        {"trigger": "abs\tCompute the absolute value", "contents": "abs $1"},
        {"trigger": "acos\tInverse of the cosine", "contents": "acos $1"},
        {"trigger": "and\tLogical AND", "contents": "and $1 $2"},
        {"trigger": "append\tAppend to the end of a list", "contents": "append "},
        {"trigger": "apply\tApply a procedure to", "contents": "apply $1 $2"},
        {"trigger": "asin\tInverse of the sine", "contents": "asin $1"},
        {"trigger": "assoc\tAdd values to a map", "contents": "assoc "},
        {"trigger": "assoc-in\tAdd values to a map (nested)", "contents": "assoc-in "},
        {"trigger": "atan\tInverse of the tangent", "contents": "atan $1"},
        {"trigger": "boolean?\tCheck if boolean", "contents": "boolean? $1"},
        {"trigger": "break", "contents": "break"},
        {"trigger": "butlast\tList containing all elements but the last one", "contents": "butlast"},
        {"trigger": "capitalize\tCapitalizes a string", "contents": "capitalize \"$1\""},
        {"trigger": "catch", "contents": "catch"},
        {"trigger": "categorical-field?", "contents": "categorical-field? $1"},
        {"trigger": "ceil\tCeiling integer", "contents": "ceil $1"},
        {"trigger": "chi-squared-test\tp-value for a given value and degrees of freedom", "contents": "chi-squared-test $1 $2"},
        {"trigger": "compare-objects\tReturns a list of the attributes that differ in the compared objects", "contents": "compare-objects $1 $2"},
        {"trigger": "concat\tConcatenate lists", "contents": "concat "},
        {"trigger": "cond\tConditional", "contents": "cond "},
        {"trigger": "cons\tPrepend to a list", "contents": "cons "},
        {"trigger": "contains-string?\tCheck if term in a string", "contents": "contains-string? $1 $2"},
        {"trigger": "contains?\tCheck if key in map", "contents": "contains? $1 $2"},
        {"trigger": "cos\tCosine", "contents": "cos $1"},
        {"trigger": "cosh\tHyperbolic cosine", "contents": "cosh $1"},
        {"trigger": "count\tLength of string, list, or keys in map", "contents": "count "},
        {"trigger": "create\tCreate a BigML resource", "contents": "create $1 {\"$2\" \"$3\/$4\"}"},
        {"trigger": "create*\tCreate a list of BigML resources", "contents": "create* [\"$1\" \"$2\"]\n         [{\"$3\" \"$4\"} {\"$5\" \"$6\"}]"},
        {"trigger": "create-and-wait\tCreate a BigML resource using wait", "contents": "create-and-wait $1 {\"$2\" \"$3\/$4\"}"},
        {"trigger": "create-and-wait*\tCreate a list of BigML resources using wait", "contents": "create-and-wait* [\"$1\" \"$2\"]\n         [{\"$3\" \"$4\"} {\"$5\" \"$6\"}]"},
        {"trigger": "create-and-wait-anomaly\tCreate an Anomaly Detector using wait", "contents": "create-and-wait-anomaly {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-anomalyscore\tCreate an Anomaly Score using wait", "contents": "create-and-wait-anomalyscore {\"anomaly\" \"anomaly\/$1\"\n                               \"input_data\" {\"$2\" $3}}"},
        {"trigger": "create-and-wait-association\tCreate an Association Discovery using wait", "contents": "create-and-wait-association {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-associationset\tCreate an Association Discovery Set using wait", "contents": "create-and-wait-associationset {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-batchanomalyscore\tCreate a Batch anomaly score using wait", "contents": "create-and-wait-batchanomalyscore {\"anomaly\" \"anomaly\/$1\"\n                                    \"dataset\" {\"dataset/$2\"}}"},
        {"trigger": "create-and-wait-batchcentroid\tCreate a Batch centroid using wait", "contents": "create-and-wait-batchcentroid {\"cluster\" \"cluster\/$1\"\n                                       \"dataset\" {\"dataset/$2\"}}"},
        {"trigger": "create-and-wait-batchprediction\tCreate a Batch prediction using wait", "contents": "create-and-wait-batchprediction {\"$1\" \"$1\/$2\"\n                                         \"dataset\" {\"dataset/$3\"}}"},
        {"trigger": "create-and-wait-batchtopicdistribution\tCreate a Batch topic distribution using wait", "contents": "create-and-wait-batchtopicdistribution {\"topicmodel\" \"topicmodel\/$1\"\n                                         \"dataset\" {\"dataset/$2\"}}"},
        {"trigger": "create-and-wait-centroid\tCreate a Centroid using wait", "contents": "create-and-wait-centroid {\"cluster\" \"cluster\/$1\"\n                           \"input_data\" {\"$2\" $3}}"},
        {"trigger": "create-and-wait-cluster\tCreate a Cluster using wait", "contents": "create-and-wait-cluster {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-composite\tCreate a Composite using wait", "contents": "create-and-wait-composite {\"$1\"}"},
        {"trigger": "create-and-wait-configuration\tCreate a Configuration using wait", "contents": "create-and-wait-configuration {$1}"},
        {"trigger": "create-and-wait-correlation\tCreate a Correlation using wait", "contents": "create-and-wait-correlation {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-dataset\tCreate a Dataset using wait", "contents": "create-and-wait-dataset {\"source\" \"source\/$1\"}"},
        {"trigger": "create-and-wait-deepnet\tCreate a Deep Net using wait", "contents": "create-and-wait-deepnet {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-ensemble\tCreate an Ensemble using wait", "contents": "create-and-wait-ensemble {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-evaluation\tCreate an Evaluation using wait", "contents": "create-and-wait-evaluation {\"$1\" \"$1\/$2\"\n                             \"dataset\" {\"dataset/$3\"}}"},
        {"trigger": "create-and-wait-execution\tCreate an Execution using wait", "contents": "create-and-wait-execution {\"script\" \"script\/$1\"}"},
        {"trigger": "create-and-wait-forecast\tCreate a Forecast using wait", "contents": "create-and-wait-forecast {\"timeseries\" \"timeseries\/$1\"\n                           \"input_data\" {\"$2\" $3}}"},
        {"trigger": "create-and-wait-fusion\tCreate a Fusion using wait", "contents": "create-and-wait-fusion {\"models\" [\"$1\" \"$2\"]}"},
        {"trigger": "create-and-wait-library\tCreate a Library using wait", "contents": "create-and-wait-library {\"source_code\" \"$1\"}"},
        {"trigger": "create-and-wait-linearregression\tCreate a Linear Regression using wait", "contents": "create-and-wait-linearregression {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-logisticregression\tCreate a Logistic Regression using wait", "contents": "create-and-wait-logisticregression {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-model\tCreate a Model using wait", "contents": "create-and-wait-model {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-optiml\tCreate an OptiML using wait", "contents": "create-and-wait-optiml {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-pca\tCreate a PCA using wait", "contents": "create-and-wait-pca {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-prediction\tCreate a Prediction using wait", "contents": "create-and-wait-prediction {\"$1\" \"$1\/$2\"\n                               \"input_data\" {\"$3\" $4}}"},
        {"trigger": "create-and-wait-project\tCreate a Project using wait", "contents": "create-and-wait-project {\"$1\" \"$2\"}"},
        {"trigger": "create-and-wait-projection\tCreate a Projection using wait", "contents": "create-and-wait-projection {\"pca\" \"pca\/$1\"\n                           \"input_data\" {\"$2\" $3}}"},
        {"trigger": "create-and-wait-sample\tCreate a Sample using wait", "contents": "create-and-wait-sample {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-script\tCreate a Script using wait", "contents": "create-and-wait-script {\"source_code\" \"$1\"}"},
        {"trigger": "create-and-wait-source\tCreate a Source using wait", "contents": "create-and-wait-source {\"remote\" \"$1\"}"},
        {"trigger": "create-and-wait-statisticaltest\tCreate a Statistical Test using wait", "contents": "create-and-wait-statisticaltest {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-timeseries\tCreate a Time Series using wait", "contents": "create-and-wait-timeseries {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-topicdistribution\tCreate a Topic Distribution using wait", "contents": "create-and-wait-topicdistribution {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-and-wait-topicmodel\tCreate a Topic Model using wait", "contents": "create-and-wait-topicmodel {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-anomaly\tCreate an Anomaly Detector", "contents": "create-anomaly {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-anomalyscore\tCreate an Anomaly Score", "contents": "create-anomalyscore {\"anomaly\" \"anomaly\/$1\"\n                      \"input_data\" {\"$2\" $3}}"},
        {"trigger": "create-association\tCreate an Association Discovery", "contents": "create-association {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-associationset\tCreate an Association Discovery Set", "contents": "create-associationset {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-batchanomalyscore\tCreate a Batch anomaly score", "contents": "create-batchanomalyscore {\"anomaly\" \"anomaly\/$1\"\n                           \"dataset\" {\"dataset/$2\"}}"},
        {"trigger": "create-batchcentroid\tCreate a Batch centroid", "contents": "create-batchcentroid {\"cluster\" \"cluster\/$1\"\n                       \"dataset\" {\"dataset/$3\"}}"},
        {"trigger": "create-batchprediction\tCreate a Batch prediction", "contents": "create-batchprediction {\"$1\" \"$1\/$2\"\n                         \"dataset\" {\"dataset/$3\"}}"},
        {"trigger": "create-batchprojection\tCreate a Batch projection", "contents": "create-batchprojection {\"pca\" \"pca\/$1\"\n                         \"dataset\" {\"dataset/$3\"}}"},
        {"trigger": "create-batchtopicdistribution\tCreate a Batch topic distribution", "contents": "create-batchtopicdistribution {\"topicmodel\" \"topicmodel\/$1\"\n                                \"dataset\" {\"dataset/$2\"}}"},
        {"trigger": "create-centroid\tCreate a Centroid", "contents": "create-centroid {\"cluster\" \"cluster\/$1\"\n                  \"input_data\" {\"$2\" $3}}"},
        {"trigger": "create-cluster\tCreate a Cluster", "contents": "create-cluster {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-composite\tCreate a Composite", "contents": "create-composite {\"$1\"}"},
        {"trigger": "create-configuration\tCreate a Configuration", "contents": "create-configuration {$1}"},
        {"trigger": "create-correlation\tCreate a Correlation", "contents": "create-correlation {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-dataset\tCreate a Dataset", "contents": "create-dataset {\"source\" \"source\/$1\"}"},
        {"trigger": "create-dataset-split\tCreate a Training | Test split Dataset", "contents": "create-dataset-split {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-deepnet\tCreate a Deep Net", "contents": "create-deepnet {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-ensemble\tCreate an Ensemble", "contents": "create-ensemble {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-evaluation\tCreate an Evaluation", "contents": "create-evaluation {\"$1\" \"$1\/$2\"\n                    \"dataset\" {\"dataset/$3\"}}"},
        {"trigger": "create-execution\tCreate an Execution", "contents": "create-execution {\"script\" \"script\/$1\"}"},
        {"trigger": "create-forecast\tCreate a Forecast", "contents": "create-forecast {\"timeseries\" \"timeseries\/$1\"\n                  \"input_data\" {\"$2\" $3}}"},
        {"trigger": "create-fusion\tCreate a Fusion", "contents": "create-fusion {\"models\" [\"$1\" \"$2\"]}"},
        {"trigger": "create-library\tCreate a Library", "contents": "create-library {\"source_code\" \"$1\"}"},
        {"trigger": "create-linearregression\tCreate a Linear Regression", "contents": "create-linearregression {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-logisticregression\tCreate a Logistic Regression", "contents": "create-logisticregression {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-model\tCreate a Model", "contents": "create-model {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-optiml\tCreate an OptiML", "contents": "create-optiml {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-prediction\tCreate a Prediction", "contents": "create-prediction {\"$1\" \"$1\/$2\"\n                    \"input_data\" {\"$3\" $4}}"},
        {"trigger": "create-pca\tCreate a PCA", "contents": "create-pca {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-project\tCreate a Project", "contents": "create-project {\"$1\" \"$2\"}"},
        {"trigger": "create-projection\tCreate a Projection", "contents": "create-projection {\"pca\" \"pca\/$1\"\n                    \"input_data\" {\"$3\" $4}}"},
        {"trigger": "create-random-dataset-split\tCreate a Random Training | Test split Dataset", "contents": "create-random-dataset-split {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-rng\tCreate a RNG instance", "contents": "create-rng $1"},
        {"trigger": "create-sample\tCreate a Sample", "contents": "create-sample {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-script\tCreate a Script", "contents": "create-script {\"source_code\" \"$1\"}"},
        {"trigger": "create-source\tCreate a Source ", "contents": "create-source {\"remote\" \"$1\"}"},
        {"trigger": "create-statisticaltest\tCreate a Statistical Test", "contents": "create-statisticaltest {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-timeseries\tCreate a Time Series", "contents": "create-timeseries {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-topicdistribution\tCreate a Topic Distribution", "contents": "create-topicdistribution {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "create-topicmodel\tCreate a Topic Model", "contents": "create-topicmodel {\"dataset\" \"dataset\/$1\"}"},
        {"trigger": "created-resources\tList IDs of created resources", "contents": "created-resources"},
        {"trigger": "current-time\tCurrent time as milliseconds since Jan 1st, 1970 (Unix epoch)", "contents": "current-time"},
        {"trigger": "dataset-choose-objective-id", "contents": "dataset-choose-objective-id"},
        {"trigger": "dataset-get-objective-id\tGet the preferred objective field ID", "contents": "dataset-get-objective-id $1"},
        {"trigger": "datetime-field?\tCheck if the optype of the field is datetime", "contents": "datetime-field? $1"},
        {"trigger": "define", "contents": "define"},
        {"trigger": "delete\tDelete a resource", "contents": "delete $1"},
        {"trigger": "delete*\tDelete a list of resources", "contents": "delete* [\"$1\"]"},
        {"trigger": "dissoc\tRemove elements from map", "contents": "dissoc $1 \"$2\""},
        {"trigger": "dissoc-in\tRemove elements from map", "contents": "dissoc-in $1 [\"$2\"]"},
        {"trigger": "div", "contents": "div"},
        {"trigger": "drop", "contents": "drop"},
        {"trigger": "empty?\tCheck if string, list, or keys in map is empty", "contents": "empty? "},
        {"trigger": "even?\tCheck if even", "contents": "even? $1"},
        {"trigger": "every?\tCheck if every", "contents": "every? $1"},
        {"trigger": "exp", "contents": "exp"},
        {"trigger": "fetch\tRetrieve a resource", "contents": "fetch $1"},
        {"trigger": "field-categories\tGet the list of categories from a categorical field distribution", "contents": "field-categories $1"},
        {"trigger": "field-distribution\tGet the distribution of a field", "contents": "field-distribution $1"},
        {"trigger": "field-items\tGet the list of items from a items field distribution", "contents": "field-items $1"},
        {"trigger": "field-optypes\tGet the optypes of a field", "contents": "field-optypes $1"},
        {"trigger": "field-terms\tGet the list of terms from a terms field distribution", "contents": "field-terms $1"},
        {"trigger": "field?\tCheck if a map is a field descriptor", "contents": "field? $1"},
        {"trigger": "filter", "contents": "filter $1 $2"},
        {"trigger": "find-field\tFind a field by name", "contents": "find-field $1 $2"},
        {"trigger": "flatline\tConstruc a Flatline s-expression", "contents": "flatline \"$1\""},
        {"trigger": "flatline-listify", "contents": "flatline-listify"},
        {"trigger": "flatline-splice", "contents": "flatline-splice"},
        {"trigger": "flatline-str", "contents": "flatline-str"},
        {"trigger": "flatline-str-splice", "contents": "flatline-str-splice"},
        {"trigger": "floor", "contents": "floor"},
        {"trigger": "for", "contents": "for"},
        {"trigger": "gamma", "contents": "gamma"},
        {"trigger": "get", "contents": "get"},
        {"trigger": "get-in", "contents": "get-in"},
        {"trigger": "handle", "contents": "handle"},
        {"trigger": "head", "contents": "head"},
        {"trigger": "identity", "contents": "identity"},
        {"trigger": "if", "contents": "if"},
        {"trigger": "insert", "contents": "insert"},
        {"trigger": "integer?\tCheck if integer", "contents": "integer? $1"},
        {"trigger": "items-field?\tCheck if the optype of the field is items", "contents": "items-field? $1"},
        {"trigger": "iterate", "contents": "iterate"},
        {"trigger": "join", "contents": "join"},
        {"trigger": "json-str\tGenerates a JSON representation a given WhizzML value", "contents": "json-str $1"},
        {"trigger": "keys", "contents": "keys"},
        {"trigger": "lambda", "contents": "lambda"},
        {"trigger": "last\tGet last element of a list", "contents": "last"},
        {"trigger": "let", "contents": "let"},
        {"trigger": "levenshtein\tCompute the distance between two string values (non-negative integer) ", "contents": "levenshtein $1 $2"},
        {"trigger": "list\tConstruct a list", "contents": "list $1"},
        {"trigger": "list*\tPrepend elements to a list", "contents": "list* $1 $2"},
        {"trigger": "list-anomalies\tList Anomalies", "contents": "list-anomalies"},
        {"trigger": "list-anomalyscores\tList Anomaly Scores", "contents": "list-anomalyscores"},
        {"trigger": "list-associations\tList Association Discoveries", "contents": "list-associations"},
        {"trigger": "list-associationsets\tList Association Discovery Sets", "contents": "list-associationsets"},
        {"trigger": "list-batchanomalyscores\tList Batch anomaly scores", "contents": "list-batchanomalyscores"},
        {"trigger": "list-batchcentroids\tList Batch centroids", "contents": "list-batchcentroids"},
        {"trigger": "list-batchpredictions\tList Batch predictions", "contents": "list-batchpredictions"},
        {"trigger": "list-batchprojections\tList Batch projections", "contents": "list-batchprojections"},
        {"trigger": "list-batchtopicdistributions\tList Batch topic distributions", "contents": "list-batchtopicdistributions"},
        {"trigger": "list-centroids\tList Centroids", "contents": "list-centroids"},
        {"trigger": "list-clusters\tList Clusters", "contents": "list-clusters"},
        {"trigger": "list-composites\tList Composites", "contents": "list-composites"},
        {"trigger": "list-configurations\tList Configurations", "contents": "list-configurations"},
        {"trigger": "list-correlations\tList Correlations", "contents": "list-correlations"},
        {"trigger": "list-datasets\tList Datasets", "contents": "list-datasets"},
        {"trigger": "list-deepnets\tList Deep Nets", "contents": "list-deepnets"},
        {"trigger": "list-ensembles\tList Ensembles", "contents": "list-ensembles"},
        {"trigger": "list-evaluations\tList Evaluations", "contents": "list-evaluations"},
        {"trigger": "list-executions\tList Executions", "contents": "list-executions"},
        {"trigger": "list-forecasts\tList Forecasts", "contents": "list-forecasts"},
        {"trigger": "list-fusions\tList Fusions", "contents": "list-fusions"},
        {"trigger": "list-libraries\tList Libraries", "contents": "list-libraries"},
        {"trigger": "list-linearregressions\tList Linear Regressions", "contents": "list-linearregressions"},
        {"trigger": "list-logisticregressions\tList Logistic Regressions", "contents": "list-logisticregressions"},
        {"trigger": "list-models\tList Models", "contents": "list-models"},
        {"trigger": "list-optimls\tList OptiMLs", "contents": "list-optimls"},
        {"trigger": "list-pcas\tList PCAs", "contents": "list-pcas"},
        {"trigger": "list-predictions\tList Predictions", "contents": "list-predictions"},
        {"trigger": "list-projections\tList Projections", "contents": "list-projections"},
        {"trigger": "list-projects\tList Projects", "contents": "list-projects"},
        {"trigger": "list-samples\tList Samples", "contents": "list-samples"},
        {"trigger": "list-scripts\tList Scripts", "contents": "list-scripts"},
        {"trigger": "list-sources\tList Sources", "contents": "list-sources"},
        {"trigger": "list-statisticaltests\tList Statistical Tests", "contents": "list-statisticaltests"},
        {"trigger": "list-timeseries\tList Time Series", "contents": "list-timeseries"},
        {"trigger": "list-topicdistributions\tList Topic Distributions", "contents": "list-topicdistributions"},
        {"trigger": "list-topicmodels\tList Topic Models", "contents": "list-topicmodels"},
        {"trigger": "list?\tCheck if list", "contents": "list? $1"},
        {"trigger": "ln", "contents": "ln"},
        {"trigger": "log\tLogarithm", "contents": "log "},
        {"trigger": "log-debug\tLog Debug messages", "contents": "log-debug \"$1\""},
        {"trigger": "log-error\tLog Error messages", "contents": "log-error \"$1\""},
        {"trigger": "log-info\tLog Info message", "contents": "log-info \"$1\""},
        {"trigger": "log-level\tRetrieves current log level", "contents": "log-level"},
        {"trigger": "log-progress\tLog Progress message", "contents": "log-progress \"$1\""},
        {"trigger": "lower-case\tConverts a string to lower case", "contents": "lower-case \"$1\""},
        {"trigger": "log-warn\tLog Warning message", "contents": "log-warn \"$1\""},
        {"trigger": "log10\tLogarithm 10", "contents": "log10 "},
        {"trigger": "log2\tLogarithm 2", "contents": "log2 "},
        {"trigger": "logged-progress\tRetrieves latest log-progress value", "contents": "logged-progress"},
        {"trigger": "loop", "contents": "loop"},
        {"trigger": "make-map", "contents": "make-map"},
        {"trigger": "map\tConstuct a map", "contents": "map"},
        {"trigger": "map?\tCheck if map", "contents": "map? $1"},
        {"trigger": "matches", "contents": "matches"},
        {"trigger": "matches?", "contents": "matches?"},
        {"trigger": "max\tCompute the maximum of", "contents": "max $1"},
        {"trigger": "max-key", "contents": "max-key"},
        {"trigger": "md5\tCompute the MD5 hash of a string", "contents": "md5 $1"},
        {"trigger": "mean", "contents": "mean"},
        {"trigger": "member?", "contents": "member?"},
        {"trigger": "merge", "contents": "merge"},
        {"trigger": "min\tCompute the minimum of", "contents": "min $1"},
        {"trigger": "min-key", "contents": "min-key"},
        {"trigger": "negative?\tCheck if negative", "contents": "negative? $1"},
        {"trigger": "nil?", "contents": "nil?"},
        {"trigger": "not", "contents": "not"},
        {"trigger": "nth", "contents": "nth"},
        {"trigger": "number?", "contents": "number?"},
        {"trigger": "numeric-field?\tCheck if the optype of the field is numeric", "contents": "numeric-field? $1"},
        {"trigger": "odd?\tCheck if odd", "contents": "odd? $1"},
        {"trigger": "or\tLogical OR", "contents": "or $1 $2"},
        {"trigger": "parse-resource-id\tParse resource-type and ID", "contents": "parse-resource-id \"$1\""},
        {"trigger": "positive?\tCheck if positive", "contents": "positive? $1"},
        {"trigger": "pow", "contents": "pow"},
        {"trigger": "ppr-str", "contents": "pr-str"},
        {"trigger": "pr-str", "contents": "pr-str"},
        {"trigger": "pretty-whizzml", "contents": "pretty-whizzml"},
        {"trigger": "procedure?", "contents": "procedure?"},
        {"trigger": "prog", "contents": "prog"},
        {"trigger": "raise", "contents": "raise"},
        {"trigger": "rand", "contents": "rand"},
        {"trigger": "rand-int", "contents": "rand-int"},
        {"trigger": "rand-range", "contents": "rand-range"},
        {"trigger": "range", "contents": "range"},
        {"trigger": "re-quote", "contents": "re-quote"},
        {"trigger": "real?", "contents": "real?"},
        {"trigger": "recur", "contents": "recur"},
        {"trigger": "reduce", "contents": "reduce"},
        {"trigger": "regexp?", "contents": "regexp?"},
        {"trigger": "rem", "contents": "rem"},
        {"trigger": "repeat", "contents": "repeat"},
        {"trigger": "repeatedly", "contents": "repeatedly"},
        {"trigger": "replace", "contents": "replace"},
        {"trigger": "replace-first", "contents": "replace-first"},
        {"trigger": "replace-first-string", "contents": "replace-first-string"},
        {"trigger": "replace-string", "contents": "replace-string"},
        {"trigger": "resource-done?", "contents": "resource-done?"},
        {"trigger": "resource-fields", "contents": "resource-fields"},
        {"trigger": "resource-id", "contents": "resource-id"},
        {"trigger": "resource-id?\tCheck if resource ID", "contents": "resource-id? \"$1\""},
        {"trigger": "resource-ids\tGet resource IDs from list of maps", "contents": "resource-ids $1"},
        {"trigger": "resource-type\tGet resource-type from ID", "contents": "resource-type \"$1\""},
        {"trigger": "resource-workflow\tSummarizes the operations to reproduce a BigML resource", "contents": "resource-workflow $1 $2 $3"},
        {"trigger": "resources", "contents": "resources"},
        {"trigger": "reverse", "contents": "reverse"},
        {"trigger": "round", "contents": "round"},
        {"trigger": "row-distance", "contents": "row-distance"},
        {"trigger": "row-distance-squared", "contents": "row-distance-squared"},
        {"trigger": "scriptify\tProduces the WhizzML code needed to rebuild a resource workflow", "contents": "scriptify $1"},
        {"trigger": "select-keys", "contents": "select-keys"},
        {"trigger": "set-log-level\tSet log level", "contents": "set-log-level \"$1\""},
        {"trigger": "set-rng-seed", "contents": "set-rng-seed"},
        {"trigger": "sha1\tCompute the SHA1 hash of a string", "contents": "sha1 $1"},
        {"trigger": "sha256\tCompute the SHA256 hash of a string", "contents": "sha256 $1"},
        {"trigger": "sin\tSine", "contents": "sin $1"},
        {"trigger": "sinh\tHyperbolic sine", "contents": "sinh $1"},
        {"trigger": "smacdown--actual", "contents": "smacdown--actual"},
        {"trigger": "smacdown--aggregate-predictions", "contents": "smacdown--aggregate-predictions"},
        {"trigger": "smacdown--candidates", "contents": "smacdown--candidates"},
        {"trigger": "smacdown--data->dataset", "contents": "smacdown--data->dataset"},
        {"trigger": "smacdown--do-iteration", "contents": "smacdown--do-iteration"},
        {"trigger": "smacdown--evaluate", "contents": "smacdown--evaluate"},
        {"trigger": "smacdown--expected", "contents": "smacdown--expected"},
        {"trigger": "smacdown--get-id", "contents": "smacdown--get-id"},
        {"trigger": "smacdown--make-ensemble", "contents": "smacdown--make-ensemble"},
        {"trigger": "smacdown--p-improvement", "contents": "smacdown--p-improvement"},
        {"trigger": "smacdown--predictions", "contents": "smacdown--predictions"},
        {"trigger": "smacdown--project", "contents": "smacdown--project"},
        {"trigger": "smacdown--schedule", "contents": "smacdown--schedule"},
        {"trigger": "smacdown--trees-in-ensemble", "contents": "smacdown--trees-in-ensemble"},
        {"trigger": "smacdown-optimize", "contents": "smacdown-optimize"},
        {"trigger": "some", "contents": "some"},
        {"trigger": "sort", "contents": "sort"},
        {"trigger": "sort-by-key", "contents": "sort-by-key"},
        {"trigger": "sqrt", "contents": "sqrt"},
        {"trigger": "stdev", "contents": "stdev"},
        {"trigger": "str", "contents": "str"},
        {"trigger": "string?", "contents": "string?"},
        {"trigger": "subs", "contents": "subs"},
        {"trigger": "tail", "contents": "tail"},
        {"trigger": "take", "contents": "take"},
        {"trigger": "tan\tTangent", "contents": "tan $1"},
        {"trigger": "tanh\tHyperbolic tangent", "contents": "tanh $1"},
        {"trigger": "text-field?\tCheck if the optype of the field is text", "contents": "text-field? $1"},
        {"trigger": "to-degrees\tRadians to degrees", "contents": "to-degrees $1"},
        {"trigger": "to-radians\tDegrees to radians", "contents": "to-radians $1"},
        {"trigger": "try", "contents": "try"},
        {"trigger": "update\tUpdate a BigML resource", "contents": "update $1 {\"$2\" $3}"},
        {"trigger": "update-and-wait\tUpdate a BigML resource using wait", "contents": "update-and-wait $1 {\"$2\" $3}"},
        {"trigger": "upper-case\tConverts a string to upper case", "contents": "upper-case \"$1\""},
        {"trigger": "values", "contents": "values"},
        {"trigger": "variance", "contents": "variance"},
        {"trigger": "version", "contents": "version"},
        {"trigger": "version-major", "contents": "version-major"},
        {"trigger": "version-micro", "contents": "version-micro"},
        {"trigger": "version-minor", "contents": "version-minor"},
        {"trigger": "wait\tWait until resource is finished or faulty", "contents": "wait $1"},
        {"trigger": "wait*\tWait until each resource in the list is finished or faulty", "contents": "wait* $1"},
        {"trigger": "wait-forever", "contents": "wait-forever"},
        {"trigger": "wait-forever*", "contents": "wait-forever*"},
        {"trigger": "when", "contents": "when"},
        {"trigger": "with-time-log\tEvaluate body and log evaluation time", "contents": "with-time-log ($1)"},
        {"trigger": "zero?\tCheck if zero", "contents": "zero? $1"}
    ]
}
